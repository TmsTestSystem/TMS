const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 55432,
  user: 'tms_user',
  password: 'tms_password',
  database: 'tms'
});

async function testNewAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É test_plan_cases
    const tableCheck = await pool.query(`
      SELECT COUNT(*) as count FROM test_plan_cases
    `);
    console.log(`üìä –°–≤—è–∑–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ test_plan_cases: ${tableCheck.rows[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –≤ –ø–ª–∞–Ω–µ "–∫—É—Ü"
    const planCases = await pool.query(`
      SELECT tc.title, tpc.test_plan_id 
      FROM test_cases tc
      INNER JOIN test_plan_cases tpc ON tc.id = tpc.test_case_id
      INNER JOIN test_plans tp ON tpc.test_plan_id = tp.id
      WHERE tp.name = '–∫—É—Ü'
    `);
    console.log(`üìù –¢–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –≤ –ø–ª–∞–Ω–µ "–∫—É—Ü": ${planCases.rows.length}`);
    planCases.rows.forEach(row => {
      console.log(`  - ${row.title}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –≤ –ø–ª–∞–Ω–µ "234"
    const plan234Cases = await pool.query(`
      SELECT tc.title, tpc.test_plan_id 
      FROM test_cases tc
      INNER JOIN test_plan_cases tpc ON tc.id = tpc.test_case_id
      INNER JOIN test_plans tp ON tpc.test_plan_id = tp.id
      WHERE tp.name = '234'
    `);
    console.log(`üìù –¢–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –≤ –ø–ª–∞–Ω–µ "234": ${plan234Cases.rows.length}`);
    plan234Cases.rows.forEach(row => {
      console.log(`  - ${row.title}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–ª–∞–Ω "–∫—É—Ü"
    const availableCases = await pool.query(`
      SELECT tc.title 
      FROM test_cases tc
      WHERE tc.project_id = '8508e37b-d232-4d95-a234-bd41ef3958f2'
      AND tc.is_deleted = FALSE
      AND tc.id NOT IN (
        SELECT test_case_id FROM test_plan_cases 
        WHERE test_plan_id = (SELECT id FROM test_plans WHERE name = '–∫—É—Ü')
      )
      LIMIT 5
    `);
    console.log(`üìù –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∞ "–∫—É—Ü": ${availableCases.rows.length}`);
    availableCases.rows.forEach(row => {
      console.log(`  - ${row.title}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
}

testNewAPI(); 