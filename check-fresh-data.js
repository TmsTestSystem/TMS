const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 55432,
  user: 'tms_user',
  password: 'tms_password',
  database: 'tms'
});

async function checkFreshData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–µ–∂–µ–π –±–∞–∑–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    const projects = await pool.query(`
      SELECT id, name FROM projects WHERE is_deleted = FALSE
    `);
    console.log(`üìã –ü—Ä–æ–µ–∫—Ç–æ–≤: ${projects.rows.length}`);
    projects.rows.forEach(project => {
      console.log(`  - ${project.name} (ID: ${project.id})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç-–ø–ª–∞–Ω—ã
    const plans = await pool.query(`
      SELECT id, name, project_id FROM test_plans WHERE is_deleted = FALSE
    `);
    console.log(`üìã –¢–µ—Å—Ç-–ø–ª–∞–Ω–æ–≤: ${plans.rows.length}`);
    plans.rows.forEach(plan => {
      console.log(`  - ${plan.name} (–ø—Ä–æ–µ–∫—Ç: ${plan.project_id})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
    const testCases = await pool.query(`
      SELECT id, title, project_id, section_id FROM test_cases WHERE is_deleted = FALSE
    `);
    console.log(`üìù –¢–µ—Å—Ç-–∫–µ–π—Å–æ–≤: ${testCases.rows.length}`);
    testCases.rows.forEach(tc => {
      console.log(`  - ${tc.title} (–ø—Ä–æ–µ–∫—Ç: ${tc.project_id}, —Ä–∞–∑–¥–µ–ª: ${tc.section_id})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª—ã
    const sections = await pool.query(`
      SELECT id, name, project_id, parent_id FROM test_case_sections WHERE is_deleted = FALSE
    `);
    console.log(`üìÅ –†–∞–∑–¥–µ–ª–æ–≤: ${sections.rows.length}`);
    sections.rows.forEach(section => {
      console.log(`  - ${section.name} (–ø—Ä–æ–µ–∫—Ç: ${section.project_id}, —Ä–æ–¥–∏—Ç–µ–ª—å: ${section.parent_id})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É test_plan_cases
    const planCases = await pool.query(`
      SELECT COUNT(*) as count FROM test_plan_cases
    `);
    console.log(`üìä –°–≤—è–∑–µ–π –≤ test_plan_cases: ${planCases.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
}

checkFreshData(); 